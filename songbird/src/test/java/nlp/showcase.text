record NGram(List<String> corpus, int n){
    /** get most likely next word in a sequence */
    public String forward(String sequence){
        var props = Language.getEnglishWords().stream()
            .map(word -> probability(sequence, word))
            .toList();
        var highest = props.stream().mapToDouble(x -> x).max().orElse(0.0);
        return Language.getEnglishWords().get(props.indexOf(highest));
    }
    /** get probability that @param word is the next word in @param sequence */
    double probability(String sequence, String word){
        var recentWords = DataProcessor.tokenize(sequence)
            .subList(Math.max(0, sequence.length() - Math.max(0, n()-1)), sequence.length())
            .stream()
            .reduce("", (x,y) -> x + y);
        return count(recentWords + " " + word) / count(recentWords);
    }
    /** get number of occurrences of @param needle in the @param corpus */
    double count(String needle){
        return corpus().stream()
            .filter(haystack -> haystack.contains(needle))
            .count();
    }
}

@Test public void test() {
    var corpus = List.of(
        "i like",
        "i like cats"
    );
    var n = 2;
    var model = new NGram(corpus, n);
    var nextWord = model.forward("i like");
    Assertions.assertTrue(nextWord.equals("cats"));
}